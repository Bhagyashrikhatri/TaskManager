import React, { useState, useEffect } from 'react';
import { Plus, Trash2, Edit2, Check, X, Clock, Flag, Moon, Sun, Filter, Search } from 'lucide-react';

const TaskManager = () => {
  const [tasks, setTasks] = useState([
    { id: 1, title: 'Design Homepage', description: 'Create modern landing page', status: 'todo', priority: 'high', dueDate: '2025-11-05' },
    { id: 2, title: 'API Integration', description: 'Connect backend services', status: 'inprogress', priority: 'medium', dueDate: '2025-11-10' },
    { id: 3, title: 'Testing', description: 'Unit and integration tests', status: 'done', priority: 'low', dueDate: '2025-11-01' }
  ]);
  
  const [newTask, setNewTask] = useState({ title: '', description: '', priority: 'medium', dueDate: '' });
  const [editingTask, setEditingTask] = useState(null);
  const [searchTerm, setSearchTerm] = useState('');
  const [filterPriority, setFilterPriority] = useState('all');
  const [isDarkMode, setIsDarkMode] = useState(false);
  const [showAddForm, setShowAddForm] = useState(false);

  const columns = [
    { id: 'todo', title: 'To Do', color: 'from-blue-500 to-blue-600' },
    { id: 'inprogress', title: 'In Progress', color: 'from-yellow-500 to-orange-500' },
    { id: 'done', title: 'Done', color: 'from-green-500 to-emerald-600' }
  ];

  const priorityColors = {
    low: 'bg-green-100 text-green-800 border-green-300',
    medium: 'bg-yellow-100 text-yellow-800 border-yellow-300',
    high: 'bg-red-100 text-red-800 border-red-300'
  };

  const addTask = () => {
    if (newTask.title.trim()) {
      const task = {
        id: Date.now(),
        ...newTask,
        status: 'todo'
      };
      setTasks([...tasks, task]);
      setNewTask({ title: '', description: '', priority: 'medium', dueDate: '' });
      setShowAddForm(false);
    }
  };

  const deleteTask = (id) => {
    setTasks(tasks.filter(task => task.id !== id));
  };

  const updateTaskStatus = (id, newStatus) => {
    setTasks(tasks.map(task => 
      task.id === id ? { ...task, status: newStatus } : task
    ));
  };

  const startEdit = (task) => {
    setEditingTask({ ...task });
  };

  const saveEdit = () => {
    setTasks(tasks.map(task => 
      task.id === editingTask.id ? editingTask : task
    ));
    setEditingTask(null);
  };

  const cancelEdit = () => {
    setEditingTask(null);
  };

  const filteredTasks = tasks.filter(task => {
    const matchesSearch = task.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         task.description.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesPriority = filterPriority === 'all' || task.priority === filterPriority;
    return matchesSearch && matchesPriority;
  });

  const getTasksByStatus = (status) => {
    return filteredTasks.filter(task => task.status === status);
  };

  const getStats = () => {
    return {
      total: tasks.length,
      todo: tasks.filter(t => t.status === 'todo').length,
      inProgress: tasks.filter(t => t.status === 'inprogress').length,
      done: tasks.filter(t => t.status === 'done').length
    };
  };

  const stats = getStats();

  const bgClass = isDarkMode ? 'bg-gray-900' : 'bg-gradient-to-br from-purple-50 via-pink-50 to-blue-50';
  const cardBgClass = isDarkMode ? 'bg-gray-800' : 'bg-white';
  const textClass = isDarkMode ? 'text-gray-100' : 'text-gray-900';
  const borderClass = isDarkMode ? 'border-gray-700' : 'border-gray-200';

  return (
    <div className={`min-h-screen ${bgClass} transition-colors duration-300 p-4 md:p-8`}>
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <div className={`${cardBgClass} rounded-3xl shadow-2xl p-6 mb-6`}>
          <div className="flex flex-col md:flex-row justify-between items-start md:items-center gap-4 mb-6">
            <div>
              <h1 className={`text-4xl font-bold bg-gradient-to-r from-purple-600 to-pink-600 bg-clip-text text-transparent mb-2`}>
                Task Manager Pro
              </h1>
              <p className={`${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>
                Organize your work efficiently
              </p>
            </div>
            
            <button
              onClick={() => setIsDarkMode(!isDarkMode)}
              className={`p-3 rounded-xl ${isDarkMode ? 'bg-gray-700' : 'bg-gray-100'} hover:scale-105 transition-transform`}
            >
              {isDarkMode ? <Sun className="w-6 h-6 text-yellow-400" /> : <Moon className="w-6 h-6 text-gray-700" />}
            </button>
          </div>

          {/* Stats */}
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-6">
            {[
              { label: 'Total Tasks', value: stats.total, color: 'from-purple-500 to-purple-600' },
              { label: 'To Do', value: stats.todo, color: 'from-blue-500 to-blue-600' },
              { label: 'In Progress', value: stats.inProgress, color: 'from-yellow-500 to-orange-500' },
              { label: 'Completed', value: stats.done, color: 'from-green-500 to-emerald-600' }
            ].map((stat, index) => (
              <div key={index} className={`bg-gradient-to-r ${stat.color} rounded-2xl p-4 text-white`}>
                <div className="text-3xl font-bold mb-1">{stat.value}</div>
                <div className="text-sm opacity-90">{stat.label}</div>
              </div>
            ))}
          </div>

          {/* Search and Filters */}
          <div className="flex flex-col md:flex-row gap-3 mb-4">
            <div className="flex-1 relative">
              <Search className={`absolute left-4 top-1/2 transform -translate-y-1/2 ${isDarkMode ? 'text-gray-500' : 'text-gray-400'} w-5 h-5`} />
              <input
                type="text"
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                placeholder="Search tasks..."
                className={`w-full pl-12 pr-4 py-3 ${isDarkMode ? 'bg-gray-700 border-gray-600 text-white' : 'bg-gray-50 border-gray-200'} border-2 rounded-xl focus:border-purple-500 focus:outline-none transition-colors`}
              />
            </div>
            
            <select
              value={filterPriority}
              onChange={(e) => setFilterPriority(e.target.value)}
              className={`px-4 py-3 ${isDarkMode ? 'bg-gray-700 border-gray-600 text-white' : 'bg-gray-50 border-gray-200'} border-2 rounded-xl focus:border-purple-500 focus:outline-none transition-colors`}
            >
              <option value="all">All Priorities</option>
              <option value="high">High Priority</option>
              <option value="medium">Medium Priority</option>
              <option value="low">Low Priority</option>
            </select>

            <button
              onClick={() => setShowAddForm(!showAddForm)}
              className="px-6 py-3 bg-gradient-to-r from-purple-600 to-pink-600 text-white rounded-xl hover:shadow-lg transition-all font-semibold flex items-center gap-2"
            >
              <Plus className="w-5 h-5" />
              Add Task
            </button>
          </div>

          {/* Add Task Form */}
          {showAddForm && (
            <div className={`${isDarkMode ? 'bg-gray-700' : 'bg-purple-50'} rounded-2xl p-6 space-y-4`}>
              <input
                type="text"
                value={newTask.title}
                onChange={(e) => setNewTask({ ...newTask, title: e.target.value })}
                placeholder="Task title..."
                className={`w-full px-4 py-3 ${isDarkMode ? 'bg-gray-600 border-gray-500 text-white' : 'bg-white border-gray-300'} border-2 rounded-xl focus:border-purple-500 focus:outline-none`}
              />
              <textarea
                value={newTask.description}
                onChange={(e) => setNewTask({ ...newTask, description: e.target.value })}
                placeholder="Task description..."
                className={`w-full px-4 py-3 ${isDarkMode ? 'bg-gray-600 border-gray-500 text-white' : 'bg-white border-gray-300'} border-2 rounded-xl focus:border-purple-500 focus:outline-none resize-none`}
                rows="3"
              />
              <div className="flex gap-3">
                <select
                  value={newTask.priority}
                  onChange={(e) => setNewTask({ ...newTask, priority: e.target.value })}
                  className={`flex-1 px-4 py-3 ${isDarkMode ? 'bg-gray-600 border-gray-500 text-white' : 'bg-white border-gray-300'} border-2 rounded-xl focus:border-purple-500 focus:outline-none`}
                >
                  <option value="low">Low Priority</option>
                  <option value="medium">Medium Priority</option>
                  <option value="high">High Priority</option>
                </select>
                <input
                  type="date"
                  value={newTask.dueDate}
                  onChange={(e) => setNewTask({ ...newTask, dueDate: e.target.value })}
                  className={`flex-1 px-4 py-3 ${isDarkMode ? 'bg-gray-600 border-gray-500 text-white' : 'bg-white border-gray-300'} border-2 rounded-xl focus:border-purple-500 focus:outline-none`}
                />
              </div>
              <div className="flex gap-3">
                <button
                  onClick={addTask}
                  className="flex-1 px-6 py-3 bg-gradient-to-r from-purple-600 to-pink-600 text-white rounded-xl hover:shadow-lg transition-all font-semibold"
                >
                  Add Task
                </button>
                <button
                  onClick={() => setShowAddForm(false)}
                  className={`px-6 py-3 ${isDarkMode ? 'bg-gray-600' : 'bg-gray-200'} ${textClass} rounded-xl hover:shadow-lg transition-all font-semibold`}
                >
                  Cancel
                </button>
              </div>
            </div>
          )}
        </div>

        {/* Task Columns */}
        <div className="grid md:grid-cols-3 gap-6">
          {columns.map(column => (
            <div key={column.id} className={`${cardBgClass} rounded-3xl shadow-xl p-6`}>
              <div className={`bg-gradient-to-r ${column.color} text-white rounded-2xl p-4 mb-4`}>
                <h2 className="text-xl font-bold">{column.title}</h2>
                <div className="text-sm opacity-90">{getTasksByStatus(column.id).length} tasks</div>
              </div>

              <div className="space-y-4 max-h-[600px] overflow-y-auto pr-2">
                {getTasksByStatus(column.id).map(task => (
                  <div
                    key={task.id}
                    className={`${isDarkMode ? 'bg-gray-700' : 'bg-gradient-to-br from-gray-50 to-white'} rounded-2xl p-4 shadow-lg hover:shadow-xl transition-all border-2 ${borderClass}`}
                  >
                    {editingTask?.id === task.id ? (
                      <div className="space-y-3">
                        <input
                          type="text"
                          value={editingTask.title}
                          onChange={(e) => setEditingTask({ ...editingTask, title: e.target.value })}
                          className={`w-full px-3 py-2 ${isDarkMode ? 'bg-gray-600 border-gray-500 text-white' : 'bg-white border-gray-300'} border-2 rounded-lg focus:border-purple-500 focus:outline-none`}
                        />
                        <textarea
                          value={editingTask.description}
                          onChange={(e) => setEditingTask({ ...editingTask, description: e.target.value })}
                          className={`w-full px-3 py-2 ${isDarkMode ? 'bg-gray-600 border-gray-500 text-white' : 'bg-white border-gray-300'} border-2 rounded-lg focus:border-purple-500 focus:outline-none resize-none`}
                          rows="2"
                        />
                        <div className="flex gap-2">
                          <button onClick={saveEdit} className="p-2 bg-green-500 text-white rounded-lg hover:bg-green-600">
                            <Check className="w-4 h-4" />
                          </button>
                          <button onClick={cancelEdit} className="p-2 bg-red-500 text-white rounded-lg hover:bg-red-600">
                            <X className="w-4 h-4" />
                          </button>
                        </div>
                      </div>
                    ) : (
                      <>
                        <div className="flex justify-between items-start mb-3">
                          <h3 className={`font-bold text-lg ${textClass}`}>{task.title}</h3>
                          <span className={`px-3 py-1 rounded-full text-xs font-semibold border ${priorityColors[task.priority]}`}>
                            {task.priority}
                          </span>
                        </div>
                        
                        <p className={`${isDarkMode ? 'text-gray-400' : 'text-gray-600'} text-sm mb-3`}>{task.description}</p>
                        
                        {task.dueDate && (
                          <div className={`flex items-center gap-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'} text-sm mb-3`}>
                            <Clock className="w-4 h-4" />
                            <span>{new Date(task.dueDate).toLocaleDateString()}</span>
                          </div>
                        )}

                        <div className="flex gap-2 pt-3 border-t border-gray-200">
                          {column.id !== 'todo' && (
                            <button
                              onClick={() => updateTaskStatus(task.id, column.id === 'inprogress' ? 'todo' : 'inprogress')}
                              className={`flex-1 px-3 py-2 ${isDarkMode ? 'bg-gray-600' : 'bg-gray-100'} ${textClass} rounded-lg hover:shadow-md transition-all text-sm font-medium`}
                            >
                              ← Back
                            </button>
                          )}
                          {column.id !== 'done' && (
                            <button
                              onClick={() => updateTaskStatus(task.id, column.id === 'todo' ? 'inprogress' : 'done')}
                              className="flex-1 px-3 py-2 bg-gradient-to-r from-purple-500 to-pink-500 text-white rounded-lg hover:shadow-md transition-all text-sm font-medium"
                            >
                              Next →
                            </button>
                          )}
                          <button
                            onClick={() => startEdit(task)}
                            className={`p-2 ${isDarkMode ? 'bg-gray-600' : 'bg-blue-100'} ${isDarkMode ? 'text-blue-400' : 'text-blue-600'} rounded-lg hover:shadow-md transition-all`}
                          >
                            <Edit2 className="w-4 h-4" />
                          </button>
                          <button
                            onClick={() => deleteTask(task.id)}
                            className="p-2 bg-red-100 text-red-600 rounded-lg hover:shadow-md transition-all"
                          >
                            <Trash2 className="w-4 h-4" />
                          </button>
                        </div>
                      </>
                    )}
                  </div>
                ))}
                
                {getTasksByStatus(column.id).length === 0 && (
                  <div className={`text-center py-12 ${isDarkMode ? 'text-gray-500' : 'text-gray-400'}`}>
                    <div className="text-5xl mb-2">📋</div>
                    <p>No tasks here yet</p>
                  </div>
                )}
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
};

export default TaskManager;
